#define NoOfShop 2000; // 2000 shop
#define NoOfFloors 10; // Expo is a hall with 10 floor
#define NoOfEvents 2;
#define NoOfPlaces 2;
#define NoOfGroups 4;

var placeAvailableSlots[NoOfPlaces] = [100, 200];
var visitorsGroups[NoOfGroups] = [50, 40, 60, 20];

//Event will be occured at place. each place can only hold one event.

//expoEvent(i) = book.i -> setUp.i -> openForVisit.i -> close.i -> Skip;
expoEvent(i) = book.i -> close.i -> Skip;
expoPlace(j) = available.j -> ([] i:{0..NoOfEvents-1}@(book.i -> eventRunningOn.j -> close.i -> eventEnd.j -> expoPlace(j)));

//expoPlace(j) = []i:{0..NoOfEvent-1}@(book.i -> placeOccupied.j -> setUp.i -> close.i -> expoPlace(j));
System() = (|| i:{0..NoOfEvents-1}@expoEvent(i)) || (|| j:{0..NoOfPlaces-1}@(expoPlace(j)));

//visitors Process

VisitSystem() = [] j:{0..NoOfPlaces-1}@([placeAvailableSlots[j] > 0] notFull -> (
		  [] k:{0..NoOfGroups - 1}@([visitorsGroups[k] > 0] visitorsAt.k.j{
		  	placeAvailableSlots[j] = placeAvailableSlots[j] - visitorsGroups[k];
		  	visitorsGroups[k] = 0;
		  }
		  -> visit())));
		  
//TODO: assert if at at anytime, event cannot hold customers.